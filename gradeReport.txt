See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 256 warnings)

Correctness:  23/23 tests passed
Memory:       4/4 tests passed
Timing:       1/1 tests passed

Aggregate score: 95.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.0K Feb  8 15:21 BaseballElimination.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac BaseballElimination.java
*-----------------------------------------------------------
BaseballElimination.java:32: warning: [rawtypes] found raw type: HashMap
        againsts=(HashMap<Integer,Integer>[]) new HashMap[nteams];
                                                  ^
  missing type arguments for generic class HashMap<K,V>
  where K,V are type-variables:
    K extends Object declared in class HashMap
    V extends Object declared in class HashMap
BaseballElimination.java:32: warning: [unchecked] unchecked cast
        againsts=(HashMap<Integer,Integer>[]) new HashMap[nteams];
                                              ^
  required: HashMap<Integer,Integer>[]
  found:    HashMap[]
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
BaseballElimination:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:9:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:15:34: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:15:43: The instance variable 'teams_n_numbers' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] BaseballElimination.java:16:35: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:16:43: The instance variable 'numbers_n_teams' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] BaseballElimination.java:17:35: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:20:44: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:21:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:24:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] BaseballElimination.java:24:48: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:25:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:25:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:26:15: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:26:16: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:27:13: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:27:14: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:28:15: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:28:16: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:29:19: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:29:20: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:30:24: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:30:25: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:30:44: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:31:24: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:31:25: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:31:45: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:32:17: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:32:18: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:32:35: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:34:12: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:34:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:34:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:34:21: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:34:22: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:34:23: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:34:30: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:34:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:35:24: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BaseballElimination.java:35:25: '=' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 256 warnings.

% custom checkstyle checks for BaseballElimination.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of BaseballElimination
*-----------------------------------------------------------
Running 23 total tests.

Test 1: check numberOfTeams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 2: check teams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 3: check wins()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 4: check losses()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 5: check remaining()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 6: check against()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 7a: check isEliminated() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 7b: check isEliminated() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 7c: check isEliminated() when n = 6 to 19
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
==> passed

Test 7d: check isEliminated() when n = 20 to 30
  * teams24.txt
  * teams29.txt
  * teams30.txt
==> passed

Test 7e: check isEliminated() when n = 30 to 50
  * teams32.txt
  * teams36.txt
  * teams42.txt
  * teams48.txt
==> passed

Test 8: check that isEliminated() is consistent with certificateOfElimination()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 9a: check certificateOfElimination() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 9b: check certificateOfElimination() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 9c: check certificateOfElimination() when n = 6 to 20
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
==> passed

Test 9d: check certificateOfElimination() when n = 20 to 30
  * teams24.txt
  * teams29.txt
  * teams30.txt
==> passed

Test 9e: check certificateOfElimination() when n = 30 to 50
  * teams32.txt
  * teams36.txt
  * teams42.txt
  * teams48.txt
==> passed

Test 10: check methods when n = 1
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
==> passed

Test 11: check immutability by calling certificateOfElimination() both before
         and after calling isEliminated() and verifying that the results match
  * teams4.txt
  * teams5.txt
  * teams29.txt
==> passed

Test 12: check that certificateOfElimination() returns null for eliminated teams
  * teams4.txt
  * teams5.txt
==> passed

Test 13: check for invalid arguments
  * teams4.txt
  * teams5.txt
==> passed

Test 14: check for dependence on reference equality of strings
==> passed

Test 15: check that two Baseball objects can be created at the same time
  * teams4.txt and teams5.txt
  * teams5.txt and teams7.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TIMING
********************************************************************************

Timing BaseballElimination
*-----------------------------------------------------------
Running 1 total tests.

    n   constructor isEliminated() + certificateOfElimination()
----------------------------------------------------------------
   30       0.01       0.88
   36       0.01       1.11
   42       0.01       2.14
   48       0.00       4.02
   54       0.00       6.65
   60       0.00      12.11
time = 1.29e-06 * n^3.88  (R^2 = 0.97)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of BaseballElimination
*-----------------------------------------------------------
Running 4 total tests.

Student   vertices     = 0.50 n^2 - 0.55 n + 3.38   (R^2 = 1.000)
Reference vertices     = 0.50 n^2 - 0.50 n + 3.00   (R^2 = 1.000)
=> passed

Student   edges        = 1.50 n^2 - 3.64 n + 3.12   (R^2 = 1.000)
Reference edges        = 1.50 n^2 - 3.50 n + 2.00   (R^2 = 1.000)
=> passed

Student   memory of G  = 176.29 n^2 - 400.41 n + 516.00   (R^2 = 1.000)
Reference memory of G  = 176.00 n^2 - 384.00 n + 384.00   (R^2 = 1.000)
=> passed

Student   memory       = 31.03 n^2 + 378.58 n + 1085.00   (R^2 = 1.000)
Reference memory       = 3.99 n^2 + 222.25 n + 396.00   (R^2 = 1.000)
=> passed

Total: 4/4 tests passed!

================================================================
